// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field int maxStringLength;
    field int stringLength;
    field Array stringArray;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        let stringArray = Array.new(maxLength);
        let stringLength = 0;
        let maxStringLength = maxLength;
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do stringArray.dispose();
        do Memory.deAlloc(this);
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return stringLength;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return stringArray[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let stringArray[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        if (stringLength < maxStringLength) {
            let stringArray[stringLength] = c;
            let stringLength = stringLength + 1;
        } else {
            do Output.printString("tried to append too much");
        }
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        let stringLength = stringLength - 1;
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int val;
        var int i;
        var boolean flip;
        var int digit;

        // TODO - stop when seeing a non-digit
        if (charAt(0) = 45) {
            let flip = true;
            let i = 1;
        } else {
            let flip = false;
            let i = 0;
        }

        while (i < stringLength) {
            let digit = stringArray[i] - 48;
            if (digit > 9 | digit < 0) {
                let i = stringLength;
            } else {
                let val = 10 * val  + digit;
                let i = i + 1;
            }
        }

        if (flip) {
            return 0 - val;
        } else {
            return val;
        }
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        let stringLength = 0;
        if (val < 0) {
            do appendChar(45);
            let val = 0 - val;
        }
        do setIntRec(val);
        return;
    }

    method void setIntRec(int val) {
        var int remainder;
        var int valTemp;

        let valTemp = val / 10;
        let remainder = val - (valTemp * 10);
        if (val > 10) {
            do setIntRec(valTemp);
        }
        do appendChar(remainder + 48);  // 48 is the difference b/w numeric value and ascii
        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
