// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
    static boolean color;
    static Array twoPowers;

    /** Initializes the Screen. */
    function void init() {
        var int i;
        var int counter;

        let color = true;

        let counter = 1;
        let i = 0;
        let twoPowers = Array.new(16);
        while (i < 16) {
            let twoPowers[i] = counter;
            let counter = counter + counter;
            let i = i + 1;
        }
        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int i;

        let i = 16384;
        while (i < 24576) {
            do Memory.poke(i, 0);
            let i = i + 1;
        }

        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let color = b;
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int pixelMask;
        var int which_word_col;
        var int word;
        
        let which_word_col = x / 16;
        let pixelMask = twoPowers[x - (16 * which_word_col)];
        let word = 16384 + (32 * y) + which_word_col;

        if (color) {
            // make this pixel black
            do Memory.poke(word, Memory.peek(word) | pixelMask);
        } else {
            // make this pixel white
            do Memory.poke(word, Memory.peek(word) & ~pixelMask);
        }

        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int a;
        var int b;
        var int a_i;
        var int dx;
        var int dy;
        var int angle;

        let dx = x2 - x1;
        let dy = y2 - y1;

        // straight horizontal
        if (dy = 0) {
            if (dx < 0) {
                let dx = 0 - dx;
                let a = x2;
                let x2 = x1;
                let x1 = a;
            } 
            let a = 0;
            while (a < dx) {
                do Screen.drawPixel(x1 + a, y1 );
                let a = a + 1;
            }
            return;
        }
        // force us to always travel down (and either right or left)
        if (dy < 0) {
            // ending point is above the starting point, flip the points
            let a = x2;
            let x2 = x1;
            let x1 = a;
            let b = y2;
            let y2 = y1;
            let y1 = b;
            let dx = 0 - dx;
            let dy = 0 - dy;
        }
        // straight vertical (and we already know it's down)
        if (dx = 0) {
            while (b < dy) {
                do Screen.drawPixel(x1, y1 + b);
                let b = b + 1;
            }
            return;
        }
        // if we're going to the left, set a_i (x incrementer) to be negative and make dx positive
        if (dx < 0) {
            let dx = 0 - dx;
            let a_i = -1;
        } else {
            let a_i = 1;
        }

        let a = 0;
        let b = 0;
        let angle = 0;
        // each pixel we'll either move one in x or one in y 
        // we decide by check whether a (amt moved in x) / b (amt moved in y) exceeds dx / dy
        // we can do this without division by adding dx or dy to our angle each time we move in those directions
        
        // moving down and to the right
        while (a < dx & b < dy) {
            do Screen.drawPixel(x1 + a, y1 + b);
            if (angle < 0) {
                let a = a + a_i;
                let angle = angle + dy;
            } else {
                let b = b + 1;
                let angle = angle - dx;
            }
        }

        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        var int x;                      //0
        var int y;                      //1
        var int firstWordColAddr;       //2
        var int wordRowAddr;            //3
        var int wordColAddr;            //4
        var int lastWordRowAddr;        //5
        var int word;                   //6
        var int lastWordEnd;    // the of the last word (what we should subtract)
        var int temp;                   //8

        // could improve this significantly by finding each word and modifying all at once 
        // (e.g. set to -1 instead of setting each bit in a loop)

        let firstWordColAddr = 16384 + (32 * y1);
        let lastWordRowAddr = x2 / 16;
        let lastWordEnd = x2 - (lastWordRowAddr * 16);
        let lastWordEnd = twoPowers[lastWordEnd];
        let lastWordEnd = 0 - lastWordEnd - lastWordEnd;
        let x = x1;
        while (~(x > x2)) {
            // calculate which word address for each row, and exactly what to add
            let wordRowAddr = x / 16;   // which word in this row do we care about (0-31)
            let word = x - (wordRowAddr * 16);      // this is just which bit
            let x = x - word + 16;                  // incrementing x based on the word 
            let word = twoPowers[word];     // now it's the bit in the right location
            if (wordRowAddr < lastWordRowAddr) {
                // fill from our column to the right (MSB)
                let word = 0 - word;       // flipping the sign for a power of two just fills the MSB
            } else {
                // fill from our column to x2
                let word = 0 - word - lastWordEnd;
            }

            // if color is false (0) flip so we can make it white
            if (~color) {
                let word = ~word;
            }

            let y = y1;
            let wordColAddr = firstWordColAddr;
            while (~(y > y2)) {
                let temp = Memory.peek(wordColAddr + wordRowAddr);
                if (color) {
                    // make the box black
                    let temp = temp | word;
                } else {
                    // make the box white
                    let temp = temp & word;
                }
                do Memory.poke(wordColAddr + wordRowAddr, temp);
                let wordColAddr = wordColAddr + 32;

                let y = y + 1;
            }
        }

        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int dy;     // vertical distance from center to this row
        var int r2;
        var int radical;

        let dy = 0 - r;
        let r2 = r * r;
        while (~(dy > r)) {
            let radical = Math.sqrt(r2 - (dy * dy));
            do Screen.drawLine(x - radical, y + dy, x + radical, y + dy);
            let dy = dy + 1;
        }

        return;
    }

}
