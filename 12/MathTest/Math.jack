// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {
    static Array twoToThe;

    /** Initializes the library. */
    function void init() {
        var int twoPower;
        var int twoIndex;

        let twoPower = 1;
        let twoIndex = 0;
        let twoToThe = Array.new(16);

        // initialize 'twoToThe' with the value for each power of two
        while (twoIndex < 16) {
            let twoToThe[twoIndex] = twoPower;
            let twoPower = twoPower + twoPower;
            let twoIndex = twoIndex + 1;
        }

        return;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if (x < 0) {
            return 0 - x;
        } else {
            return x;
        }
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        var int sum;
        var int shiftedX;
        var int n;      // most significant big of x
        var int i;      // bit placehoder for x
        var boolean flip;   // whether we'll need to flip the sign of the abs 

        if (x < 0) {
            let flip = true;
            let x = 0 - x;
        } else {
            let flip = false;
        }
        if (y < 0) {
            let flip = ~flip;
            let y = 0 - y;
        }

        let sum = 0;
        let i = 0;
        let shiftedX = x;

        // for each bit of y, add the appropriately shifted value of x to the sum
        while (i < 15) {
            if ((twoToThe[i] & y) > 0) {
                let sum = sum + shiftedX;
            }
            let i = i + 1;                          //increment the bit
            let shiftedX = shiftedX + shiftedX;     //left-shift the total
        }        

        // flip through addition
        if (flip) {
            return 0 - sum;
        } else {
            return sum;
        }
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
        var boolean flip;
        var int quotient;
        var Array twoQY;

        if (x < 0) {
            let flip = true;
            let x = 0 - x;
        } else {
            let flip = false;
        }
        if (y < 0) {
            let flip = ~flip;
            let y = 0 - y;
        }

        if (y > x) {
            return 0;
        }

        let twoQY = Array.new(1);
        let twoQY[0] = 0;

        let quotient = Math.divideRec(x, y, twoQY);

        do twoQY.dispose();

        if (flip) {
            return 0 - quotient;
        } else {
            return quotient;
        }
    }

    function int divideRec(int x, int y, Array twoQY) {
        var int q;

        if (y > x) {
            return 0;
        }
        if (y < 0) {
            return 0;
        }

        let q = Math.divideRec(x, 2*y, twoQY);
        if (x - twoQY[0] < y) {
            return 2 * q;
        } else {
            let twoQY[0] = twoQY[0] + y;
            return 2 * q + 1;
        }
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int j;
        var int y;
        var int y2j;
        var int y2j_sq;

        if (~(x > 0)) {
            return 0;
        }

        let y = 0;
        let j = 7;      // n / 2 - 1
        while (~ (j < 0)) {
            let y2j = y + twoToThe[j];
            let y2j_sq = y2j * y2j;
            if ((y2j_sq > 0) & ~(y2j_sq > x)) {
                let y = y2j;
            }
            let j = j - 1;
        }

        return y;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        if (b > a) {
            return b;
        } else {
            return a;
        }
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if (b < a) {
            return b;
        } else {
            return a;
        }
    }
}
