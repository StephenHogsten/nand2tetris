<class>
  <keyword> class </keyword>
  <identifier usage="declared" kind="class"> Ball </identifier>
  <symbol> { </symbol>
  <classVarDec>
    <keyword> field </keyword>
    <keyword> int </keyword>
    <identifier usage="declared" kind="FIELD" index="1"> x </identifier>
    <symbol> , </symbol>
    <identifier usage="declared" kind="FIELD" index="2"> y </identifier>
    <symbol> ; </symbol>
  </classVarDec>
  <classVarDec>
    <keyword> field </keyword>
    <keyword> int </keyword>
    <identifier usage="declared" kind="FIELD" index="3"> lengthx </identifier>
    <symbol> , </symbol>
    <identifier usage="declared" kind="FIELD" index="4"> lengthy </identifier>
    <symbol> ; </symbol>
  </classVarDec>
  <classVarDec>
    <keyword> field </keyword>
    <keyword> int </keyword>
    <identifier usage="declared" kind="FIELD" index="5"> d </identifier>
    <symbol> , </symbol>
    <identifier usage="declared" kind="FIELD" index="6"> straightD </identifier>
    <symbol> , </symbol>
    <identifier usage="declared" kind="FIELD" index="7"> diagonalD </identifier>
    <symbol> ; </symbol>
  </classVarDec>
  <classVarDec>
    <keyword> field </keyword>
    <keyword> boolean </keyword>
    <identifier usage="declared" kind="FIELD" index="8"> invert </identifier>
    <symbol> , </symbol>
    <identifier usage="declared" kind="FIELD" index="9"> positivex </identifier>
    <symbol> , </symbol>
    <identifier usage="declared" kind="FIELD" index="10"> positivey </identifier>
    <symbol> ; </symbol>
  </classVarDec>
  <classVarDec>
    <keyword> field </keyword>
    <keyword> int </keyword>
    <identifier usage="declared" kind="FIELD" index="11"> leftWall </identifier>
    <symbol> , </symbol>
    <identifier usage="declared" kind="FIELD" index="12"> rightWall </identifier>
    <symbol> , </symbol>
    <identifier usage="declared" kind="FIELD" index="13"> topWall </identifier>
    <symbol> , </symbol>
    <identifier usage="declared" kind="FIELD" index="14"> bottomWall </identifier>
    <symbol> ; </symbol>
  </classVarDec>
  <classVarDec>
    <keyword> field </keyword>
    <keyword> int </keyword>
    <identifier usage="declared" kind="FIELD" index="15"> wall </identifier>
    <symbol> ; </symbol>
  </classVarDec>
  <subroutineDec>
    <keyword> constructor </keyword>
    <identifier usage="used" kind="class"> Ball </identifier>
    <identifier usage="declared" kind="subroutine"> new </identifier>
    <symbol> ( </symbol>
    <parameterList>
      <keyword> int </keyword>
      <identifier usage="declared" kind="ARG" index="1"> Ax </identifier>
      <symbol> , </symbol>
      <keyword> int </keyword>
      <identifier usage="declared" kind="ARG" index="2"> Ay </identifier>
      <symbol> , </symbol>
      <keyword> int </keyword>
      <identifier usage="declared" kind="ARG" index="3"> AleftWall </identifier>
      <symbol> , </symbol>
      <keyword> int </keyword>
      <identifier usage="declared" kind="ARG" index="4"> ArightWall </identifier>
      <symbol> , </symbol>
      <keyword> int </keyword>
      <identifier usage="declared" kind="ARG" index="5"> AtopWall </identifier>
      <symbol> , </symbol>
      <keyword> int </keyword>
      <identifier usage="declared" kind="ARG" index="6"> AbottomWall </identifier>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <statements>
        <letStatement>
          <keyword> let </keyword>
          <identifier usage="used" kind="field" index="0"> x </identifier>
          <symbol> = </symbol>
          <expression>
            <term>
              <identifier usage="used" kind="arg" index="0"> Ax </identifier>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <letStatement>
          <keyword> let </keyword>
          <identifier usage="used" kind="field" index="1"> y </identifier>
          <symbol> = </symbol>
          <expression>
            <term>
              <identifier usage="used" kind="arg" index="1"> Ay </identifier>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <letStatement>
          <keyword> let </keyword>
          <identifier usage="used" kind="field" index="10"> leftWall </identifier>
          <symbol> = </symbol>
          <expression>
            <term>
              <identifier usage="used" kind="arg" index="2"> AleftWall </identifier>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <letStatement>
          <keyword> let </keyword>
          <identifier usage="used" kind="field" index="11"> rightWall </identifier>
          <symbol> = </symbol>
          <expression>
            <term>
              <identifier usage="used" kind="arg" index="3"> ArightWall </identifier>
            </term>
            <symbol> - </symbol>
            <term>
              <integerConstant> 6 </integerConstant>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <letStatement>
          <keyword> let </keyword>
          <identifier usage="used" kind="field" index="12"> topWall </identifier>
          <symbol> = </symbol>
          <expression>
            <term>
              <identifier usage="used" kind="arg" index="4"> AtopWall </identifier>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <letStatement>
          <keyword> let </keyword>
          <identifier usage="used" kind="field" index="13"> bottomWall </identifier>
          <symbol> = </symbol>
          <expression>
            <term>
              <identifier usage="used" kind="arg" index="5"> AbottomWall </identifier>
            </term>
            <symbol> - </symbol>
            <term>
              <integerConstant> 6 </integerConstant>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <letStatement>
          <keyword> let </keyword>
          <identifier usage="used" kind="field" index="14"> wall </identifier>
          <symbol> = </symbol>
          <expression>
            <term>
              <integerConstant> 0 </integerConstant>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier usage="used" kind="subroutine"> show </identifier>
          <symbol> ( </symbol>
          <expressionList>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <returnStatement>
          <keyword> return </keyword>
          <expression>
            <term>
            </term>
          </expression>
          <symbol> ; </symbol>
        </returnStatement>
      </statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  <subroutineDec>
    <keyword> method </keyword>
    <keyword> void </keyword>
    <identifier usage="declared" kind="subroutine"> dispose </identifier>
    <symbol> ( </symbol>
    <parameterList>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <statements>
        <doStatement>
          <keyword> do </keyword>
          <identifier usage="used" kind="class"> Memory </identifier>
          <symbol> . </symbol>
          <identifier usage="used" kind="subroutine"> deAlloc </identifier>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
              </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <returnStatement>
          <keyword> return </keyword>
          <symbol> ; </symbol>
        </returnStatement>
      </statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  <subroutineDec>
    <keyword> method </keyword>
    <keyword> void </keyword>
    <identifier usage="declared" kind="subroutine"> show </identifier>
    <symbol> ( </symbol>
    <parameterList>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <statements>
        <doStatement>
          <keyword> do </keyword>
          <identifier usage="used" kind="class"> Screen </identifier>
          <symbol> . </symbol>
          <identifier usage="used" kind="subroutine"> setColor </identifier>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
              </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier usage="used" kind="subroutine"> draw </identifier>
          <symbol> ( </symbol>
          <expressionList>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <returnStatement>
          <keyword> return </keyword>
          <symbol> ; </symbol>
        </returnStatement>
      </statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  <subroutineDec>
    <keyword> method </keyword>
    <keyword> void </keyword>
    <identifier usage="declared" kind="subroutine"> hide </identifier>
    <symbol> ( </symbol>
    <parameterList>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <statements>
        <doStatement>
          <keyword> do </keyword>
          <identifier usage="used" kind="class"> Screen </identifier>
          <symbol> . </symbol>
          <identifier usage="used" kind="subroutine"> setColor </identifier>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
              </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier usage="used" kind="subroutine"> draw </identifier>
          <symbol> ( </symbol>
          <expressionList>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <returnStatement>
          <keyword> return </keyword>
          <symbol> ; </symbol>
        </returnStatement>
      </statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  <subroutineDec>
    <keyword> method </keyword>
    <keyword> void </keyword>
    <identifier usage="declared" kind="subroutine"> draw </identifier>
    <symbol> ( </symbol>
    <parameterList>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <statements>
        <doStatement>
          <keyword> do </keyword>
          <identifier usage="used" kind="class"> Screen </identifier>
          <symbol> . </symbol>
          <identifier usage="used" kind="subroutine"> drawRectangle </identifier>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
                <identifier usage="used" kind="field" index="0"> x </identifier>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <identifier usage="used" kind="field" index="1"> y </identifier>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <identifier usage="used" kind="field" index="0"> x </identifier>
              </term>
              <symbol> + </symbol>
              <term>
                <integerConstant> 5 </integerConstant>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <identifier usage="used" kind="field" index="1"> y </identifier>
              </term>
              <symbol> + </symbol>
              <term>
                <integerConstant> 5 </integerConstant>
              </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <returnStatement>
          <keyword> return </keyword>
          <symbol> ; </symbol>
        </returnStatement>
      </statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  <subroutineDec>
    <keyword> method </keyword>
    <keyword> int </keyword>
    <identifier usage="declared" kind="subroutine"> getLeft </identifier>
    <symbol> ( </symbol>
    <parameterList>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <statements>
        <returnStatement>
          <keyword> return </keyword>
          <expression>
            <term>
              <identifier usage="used" kind="field" index="0"> x </identifier>
            </term>
          </expression>
          <symbol> ; </symbol>
        </returnStatement>
      </statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  <subroutineDec>
    <keyword> method </keyword>
    <keyword> int </keyword>
    <identifier usage="declared" kind="subroutine"> getRight </identifier>
    <symbol> ( </symbol>
    <parameterList>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <statements>
        <returnStatement>
          <keyword> return </keyword>
          <expression>
            <term>
              <identifier usage="used" kind="field" index="0"> x </identifier>
            </term>
            <symbol> + </symbol>
            <term>
              <integerConstant> 5 </integerConstant>
            </term>
          </expression>
          <symbol> ; </symbol>
        </returnStatement>
      </statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  <subroutineDec>
    <keyword> method </keyword>
    <keyword> void </keyword>
    <identifier usage="declared" kind="subroutine"> setDestination </identifier>
    <symbol> ( </symbol>
    <parameterList>
      <keyword> int </keyword>
      <identifier usage="declared" kind="ARG" index="2"> destx </identifier>
      <symbol> , </symbol>
      <keyword> int </keyword>
      <identifier usage="declared" kind="ARG" index="3"> desty </identifier>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <varDec>
        <keyword> var </keyword>
        <keyword> int </keyword>
        <identifier usage="declared" kind="ARG" index="1"> dx </identifier>
        <symbol> , </symbol>
        <identifier usage="declared" kind="ARG" index="2"> dy </identifier>
        <symbol> , </symbol>
        <identifier usage="declared" kind="ARG" index="3"> temp </identifier>
        <symbol> ; </symbol>
      </varDec>
      <statements>
        <letStatement>
          <keyword> let </keyword>
          <identifier usage="used" kind="field" index="2"> lengthx </identifier>
          <symbol> = </symbol>
          <expression>
            <term>
              <identifier usage="used" kind="arg" index="1"> destx </identifier>
            </term>
            <symbol> - </symbol>
            <term>
              <identifier usage="used" kind="field" index="0"> x </identifier>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <letStatement>
          <keyword> let </keyword>
          <identifier usage="used" kind="field" index="3"> lengthy </identifier>
          <symbol> = </symbol>
          <expression>
            <term>
              <identifier usage="used" kind="arg" index="2"> desty </identifier>
            </term>
            <symbol> - </symbol>
            <term>
              <identifier usage="used" kind="field" index="1"> y </identifier>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <letStatement>
          <keyword> let </keyword>
          <identifier usage="used" kind="var" index="0"> dx </identifier>
          <symbol> = </symbol>
          <expression>
            <term>
              <identifier usage="used"> Math </identifier>
              <symbol> . </symbol>
              <identifier usage="used" kind="class"> Math </identifier>
              <symbol> . </symbol>
              <identifier usage="used" kind="subroutine"> abs </identifier>
              <symbol> ( </symbol>
              <expressionList>
                <expression>
                  <term>
                    <identifier usage="used" kind="field" index="2"> lengthx </identifier>
                  </term>
                </expression>
              </expressionList>
              <symbol> ) </symbol>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <letStatement>
          <keyword> let </keyword>
          <identifier usage="used" kind="var" index="1"> dy </identifier>
          <symbol> = </symbol>
          <expression>
            <term>
              <identifier usage="used"> Math </identifier>
              <symbol> . </symbol>
              <identifier usage="used" kind="class"> Math </identifier>
              <symbol> . </symbol>
              <identifier usage="used" kind="subroutine"> abs </identifier>
              <symbol> ( </symbol>
              <expressionList>
                <expression>
                  <term>
                    <identifier usage="used" kind="field" index="3"> lengthy </identifier>
                  </term>
                </expression>
              </expressionList>
              <symbol> ) </symbol>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <letStatement>
          <keyword> let </keyword>
          <identifier usage="used" kind="field" index="7"> invert </identifier>
          <symbol> = </symbol>
          <expression>
            <term>
              <symbol> ( </symbol>
              <expression>
                <term>
                  <identifier usage="used" kind="var" index="0"> dx </identifier>
                </term>
                <symbol> &lt; </symbol>
                <term>
                  <identifier usage="used" kind="var" index="1"> dy </identifier>
                </term>
              </expression>
              <symbol> ) </symbol>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <ifStatement>
          <keyword> if </keyword>
          <symbol> ( </symbol>
          <expression>
            <term>
              <identifier usage="used" kind="field" index="7"> invert </identifier>
            </term>
          </expression>
          <symbol> ) </symbol>
          <symbol> { </symbol>
          <statements>
            <letStatement>
              <keyword> let </keyword>
              <identifier usage="used" kind="var" index="2"> temp </identifier>
              <symbol> = </symbol>
              <expression>
                <term>
                  <identifier usage="used" kind="var" index="0"> dx </identifier>
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
            <letStatement>
              <keyword> let </keyword>
              <identifier usage="used" kind="var" index="0"> dx </identifier>
              <symbol> = </symbol>
              <expression>
                <term>
                  <identifier usage="used" kind="var" index="1"> dy </identifier>
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
            <letStatement>
              <keyword> let </keyword>
              <identifier usage="used" kind="var" index="1"> dy </identifier>
              <symbol> = </symbol>
              <expression>
                <term>
                  <identifier usage="used" kind="var" index="2"> temp </identifier>
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
            <letStatement>
              <keyword> let </keyword>
              <identifier usage="used" kind="field" index="8"> positivex </identifier>
              <symbol> = </symbol>
              <expression>
                <term>
                  <symbol> ( </symbol>
                  <expression>
                    <term>
                      <identifier usage="used" kind="field" index="1"> y </identifier>
                    </term>
                    <symbol> &lt; </symbol>
                    <term>
                      <identifier usage="used" kind="arg" index="2"> desty </identifier>
                    </term>
                  </expression>
                  <symbol> ) </symbol>
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
            <letStatement>
              <keyword> let </keyword>
              <identifier usage="used" kind="field" index="9"> positivey </identifier>
              <symbol> = </symbol>
              <expression>
                <term>
                  <symbol> ( </symbol>
                  <expression>
                    <term>
                      <identifier usage="used" kind="field" index="0"> x </identifier>
                    </term>
                    <symbol> &lt; </symbol>
                    <term>
                      <identifier usage="used" kind="arg" index="1"> destx </identifier>
                    </term>
                  </expression>
                  <symbol> ) </symbol>
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
          </statements>
          <symbol> } </symbol>
          <keyword> else </keyword>
          <symbol> { </symbol>
          <statements>
            <letStatement>
              <keyword> let </keyword>
              <identifier usage="used" kind="field" index="8"> positivex </identifier>
              <symbol> = </symbol>
              <expression>
                <term>
                  <symbol> ( </symbol>
                  <expression>
                    <term>
                      <identifier usage="used" kind="field" index="0"> x </identifier>
                    </term>
                    <symbol> &lt; </symbol>
                    <term>
                      <identifier usage="used" kind="arg" index="1"> destx </identifier>
                    </term>
                  </expression>
                  <symbol> ) </symbol>
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
            <letStatement>
              <keyword> let </keyword>
              <identifier usage="used" kind="field" index="9"> positivey </identifier>
              <symbol> = </symbol>
              <expression>
                <term>
                  <symbol> ( </symbol>
                  <expression>
                    <term>
                      <identifier usage="used" kind="field" index="1"> y </identifier>
                    </term>
                    <symbol> &lt; </symbol>
                    <term>
                      <identifier usage="used" kind="arg" index="2"> desty </identifier>
                    </term>
                  </expression>
                  <symbol> ) </symbol>
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
          </statements>
          <symbol> } </symbol>
        </ifStatement>
        <letStatement>
          <keyword> let </keyword>
          <identifier usage="used" kind="field" index="4"> d </identifier>
          <symbol> = </symbol>
          <expression>
            <term>
              <symbol> ( </symbol>
              <expression>
                <term>
                  <integerConstant> 2 </integerConstant>
                </term>
                <symbol> * </symbol>
                <term>
                  <identifier usage="used" kind="var" index="1"> dy </identifier>
                </term>
              </expression>
              <symbol> ) </symbol>
            </term>
            <symbol> - </symbol>
            <term>
              <identifier usage="used" kind="var" index="0"> dx </identifier>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <letStatement>
          <keyword> let </keyword>
          <identifier usage="used" kind="field" index="5"> straightD </identifier>
          <symbol> = </symbol>
          <expression>
            <term>
              <integerConstant> 2 </integerConstant>
            </term>
            <symbol> * </symbol>
            <term>
              <identifier usage="used" kind="var" index="1"> dy </identifier>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <letStatement>
          <keyword> let </keyword>
          <identifier usage="used" kind="field" index="6"> diagonalD </identifier>
          <symbol> = </symbol>
          <expression>
            <term>
              <integerConstant> 2 </integerConstant>
            </term>
            <symbol> * </symbol>
            <term>
              <symbol> ( </symbol>
              <expression>
                <term>
                  <identifier usage="used" kind="var" index="1"> dy </identifier>
                </term>
                <symbol> - </symbol>
                <term>
                  <identifier usage="used" kind="var" index="0"> dx </identifier>
                </term>
              </expression>
              <symbol> ) </symbol>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <returnStatement>
          <keyword> return </keyword>
          <symbol> ; </symbol>
        </returnStatement>
      </statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  <subroutineDec>
    <keyword> method </keyword>
    <keyword> int </keyword>
    <identifier usage="declared" kind="subroutine"> move </identifier>
    <symbol> ( </symbol>
    <parameterList>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <statements>
        <doStatement>
          <keyword> do </keyword>
          <identifier usage="used" kind="subroutine"> hide </identifier>
          <symbol> ( </symbol>
          <expressionList>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <ifStatement>
          <keyword> if </keyword>
          <symbol> ( </symbol>
          <expression>
            <term>
              <identifier usage="used" kind="field" index="4"> d </identifier>
            </term>
            <symbol> &lt; </symbol>
            <term>
              <integerConstant> 0 </integerConstant>
            </term>
          </expression>
          <symbol> ) </symbol>
          <symbol> { </symbol>
          <statements>
            <letStatement>
              <keyword> let </keyword>
              <identifier usage="used" kind="field" index="4"> d </identifier>
              <symbol> = </symbol>
              <expression>
                <term>
                  <identifier usage="used" kind="field" index="4"> d </identifier>
                </term>
                <symbol> + </symbol>
                <term>
                  <identifier usage="used" kind="field" index="5"> straightD </identifier>
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
          </statements>
          <symbol> } </symbol>
          <keyword> else </keyword>
          <symbol> { </symbol>
          <statements>
            <letStatement>
              <keyword> let </keyword>
              <identifier usage="used" kind="field" index="4"> d </identifier>
              <symbol> = </symbol>
              <expression>
                <term>
                  <identifier usage="used" kind="field" index="4"> d </identifier>
                </term>
                <symbol> + </symbol>
                <term>
                  <identifier usage="used" kind="field" index="6"> diagonalD </identifier>
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
            <ifStatement>
              <keyword> if </keyword>
              <symbol> ( </symbol>
              <expression>
                <term>
                  <identifier usage="used" kind="field" index="9"> positivey </identifier>
                </term>
              </expression>
              <symbol> ) </symbol>
              <symbol> { </symbol>
              <statements>
                <ifStatement>
                  <keyword> if </keyword>
                  <symbol> ( </symbol>
                  <expression>
                    <term>
                      <identifier usage="used" kind="field" index="7"> invert </identifier>
                    </term>
                  </expression>
                  <symbol> ) </symbol>
                  <symbol> { </symbol>
                  <statements>
                    <letStatement>
                      <keyword> let </keyword>
                      <identifier usage="used" kind="field" index="0"> x </identifier>
                      <symbol> = </symbol>
                      <expression>
                        <term>
                          <identifier usage="used" kind="field" index="0"> x </identifier>
                        </term>
                        <symbol> + </symbol>
                        <term>
                          <integerConstant> 4 </integerConstant>
                        </term>
                      </expression>
                      <symbol> ; </symbol>
                    </letStatement>
                  </statements>
                  <symbol> } </symbol>
                  <keyword> else </keyword>
                  <symbol> { </symbol>
                  <statements>
                    <letStatement>
                      <keyword> let </keyword>
                      <identifier usage="used" kind="field" index="1"> y </identifier>
                      <symbol> = </symbol>
                      <expression>
                        <term>
                          <identifier usage="used" kind="field" index="1"> y </identifier>
                        </term>
                        <symbol> + </symbol>
                        <term>
                          <integerConstant> 4 </integerConstant>
                        </term>
                      </expression>
                      <symbol> ; </symbol>
                    </letStatement>
                  </statements>
                  <symbol> } </symbol>
                </ifStatement>
              </statements>
              <symbol> } </symbol>
              <keyword> else </keyword>
              <symbol> { </symbol>
              <statements>
                <ifStatement>
                  <keyword> if </keyword>
                  <symbol> ( </symbol>
                  <expression>
                    <term>
                      <identifier usage="used" kind="field" index="7"> invert </identifier>
                    </term>
                  </expression>
                  <symbol> ) </symbol>
                  <symbol> { </symbol>
                  <statements>
                    <letStatement>
                      <keyword> let </keyword>
                      <identifier usage="used" kind="field" index="0"> x </identifier>
                      <symbol> = </symbol>
                      <expression>
                        <term>
                          <identifier usage="used" kind="field" index="0"> x </identifier>
                        </term>
                        <symbol> - </symbol>
                        <term>
                          <integerConstant> 4 </integerConstant>
                        </term>
                      </expression>
                      <symbol> ; </symbol>
                    </letStatement>
                  </statements>
                  <symbol> } </symbol>
                  <keyword> else </keyword>
                  <symbol> { </symbol>
                  <statements>
                    <letStatement>
                      <keyword> let </keyword>
                      <identifier usage="used" kind="field" index="1"> y </identifier>
                      <symbol> = </symbol>
                      <expression>
                        <term>
                          <identifier usage="used" kind="field" index="1"> y </identifier>
                        </term>
                        <symbol> - </symbol>
                        <term>
                          <integerConstant> 4 </integerConstant>
                        </term>
                      </expression>
                      <symbol> ; </symbol>
                    </letStatement>
                  </statements>
                  <symbol> } </symbol>
                </ifStatement>
              </statements>
              <symbol> } </symbol>
            </ifStatement>
          </statements>
          <symbol> } </symbol>
        </ifStatement>
        <ifStatement>
          <keyword> if </keyword>
          <symbol> ( </symbol>
          <expression>
            <term>
              <identifier usage="used" kind="field" index="8"> positivex </identifier>
            </term>
          </expression>
          <symbol> ) </symbol>
          <symbol> { </symbol>
          <statements>
            <ifStatement>
              <keyword> if </keyword>
              <symbol> ( </symbol>
              <expression>
                <term>
                  <identifier usage="used" kind="field" index="7"> invert </identifier>
                </term>
              </expression>
              <symbol> ) </symbol>
              <symbol> { </symbol>
              <statements>
                <letStatement>
                  <keyword> let </keyword>
                  <identifier usage="used" kind="field" index="1"> y </identifier>
                  <symbol> = </symbol>
                  <expression>
                    <term>
                      <identifier usage="used" kind="field" index="1"> y </identifier>
                    </term>
                    <symbol> + </symbol>
                    <term>
                      <integerConstant> 4 </integerConstant>
                    </term>
                  </expression>
                  <symbol> ; </symbol>
                </letStatement>
              </statements>
              <symbol> } </symbol>
              <keyword> else </keyword>
              <symbol> { </symbol>
              <statements>
                <letStatement>
                  <keyword> let </keyword>
                  <identifier usage="used" kind="field" index="0"> x </identifier>
                  <symbol> = </symbol>
                  <expression>
                    <term>
                      <identifier usage="used" kind="field" index="0"> x </identifier>
                    </term>
                    <symbol> + </symbol>
                    <term>
                      <integerConstant> 4 </integerConstant>
                    </term>
                  </expression>
                  <symbol> ; </symbol>
                </letStatement>
              </statements>
              <symbol> } </symbol>
            </ifStatement>
          </statements>
          <symbol> } </symbol>
          <keyword> else </keyword>
          <symbol> { </symbol>
          <statements>
            <ifStatement>
              <keyword> if </keyword>
              <symbol> ( </symbol>
              <expression>
                <term>
                  <identifier usage="used" kind="field" index="7"> invert </identifier>
                </term>
              </expression>
              <symbol> ) </symbol>
              <symbol> { </symbol>
              <statements>
                <letStatement>
                  <keyword> let </keyword>
                  <identifier usage="used" kind="field" index="1"> y </identifier>
                  <symbol> = </symbol>
                  <expression>
                    <term>
                      <identifier usage="used" kind="field" index="1"> y </identifier>
                    </term>
                    <symbol> - </symbol>
                    <term>
                      <integerConstant> 4 </integerConstant>
                    </term>
                  </expression>
                  <symbol> ; </symbol>
                </letStatement>
              </statements>
              <symbol> } </symbol>
              <keyword> else </keyword>
              <symbol> { </symbol>
              <statements>
                <letStatement>
                  <keyword> let </keyword>
                  <identifier usage="used" kind="field" index="0"> x </identifier>
                  <symbol> = </symbol>
                  <expression>
                    <term>
                      <identifier usage="used" kind="field" index="0"> x </identifier>
                    </term>
                    <symbol> - </symbol>
                    <term>
                      <integerConstant> 4 </integerConstant>
                    </term>
                  </expression>
                  <symbol> ; </symbol>
                </letStatement>
              </statements>
              <symbol> } </symbol>
            </ifStatement>
          </statements>
          <symbol> } </symbol>
        </ifStatement>
        <ifStatement>
          <keyword> if </keyword>
          <symbol> ( </symbol>
          <expression>
            <term>
              <symbol> ~ </symbol>
              <term>
                <symbol> ( </symbol>
                <expression>
                  <term>
                    <identifier usage="used" kind="field" index="0"> x </identifier>
                  </term>
                  <symbol> &gt; </symbol>
                  <term>
                    <identifier usage="used" kind="field" index="10"> leftWall </identifier>
                  </term>
                </expression>
                <symbol> ) </symbol>
              </term>
            </term>
          </expression>
          <symbol> ) </symbol>
          <symbol> { </symbol>
          <statements>
            <letStatement>
              <keyword> let </keyword>
              <identifier usage="used" kind="field" index="14"> wall </identifier>
              <symbol> = </symbol>
              <expression>
                <term>
                  <integerConstant> 1 </integerConstant>
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
            <letStatement>
              <keyword> let </keyword>
              <identifier usage="used" kind="field" index="0"> x </identifier>
              <symbol> = </symbol>
              <expression>
                <term>
                  <identifier usage="used" kind="field" index="10"> leftWall </identifier>
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
          </statements>
          <symbol> } </symbol>
        </ifStatement>
        <ifStatement>
          <keyword> if </keyword>
          <symbol> ( </symbol>
          <expression>
            <term>
              <symbol> ~ </symbol>
              <term>
                <symbol> ( </symbol>
                <expression>
                  <term>
                    <identifier usage="used" kind="field" index="0"> x </identifier>
                  </term>
                  <symbol> &lt; </symbol>
                  <term>
                    <identifier usage="used" kind="field" index="11"> rightWall </identifier>
                  </term>
                </expression>
                <symbol> ) </symbol>
              </term>
            </term>
          </expression>
          <symbol> ) </symbol>
          <symbol> { </symbol>
          <statements>
            <letStatement>
              <keyword> let </keyword>
              <identifier usage="used" kind="field" index="14"> wall </identifier>
              <symbol> = </symbol>
              <expression>
                <term>
                  <integerConstant> 2 </integerConstant>
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
            <letStatement>
              <keyword> let </keyword>
              <identifier usage="used" kind="field" index="0"> x </identifier>
              <symbol> = </symbol>
              <expression>
                <term>
                  <identifier usage="used" kind="field" index="11"> rightWall </identifier>
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
          </statements>
          <symbol> } </symbol>
        </ifStatement>
        <ifStatement>
          <keyword> if </keyword>
          <symbol> ( </symbol>
          <expression>
            <term>
              <symbol> ~ </symbol>
              <term>
                <symbol> ( </symbol>
                <expression>
                  <term>
                    <identifier usage="used" kind="field" index="1"> y </identifier>
                  </term>
                  <symbol> &gt; </symbol>
                  <term>
                    <identifier usage="used" kind="field" index="12"> topWall </identifier>
                  </term>
                </expression>
                <symbol> ) </symbol>
              </term>
            </term>
          </expression>
          <symbol> ) </symbol>
          <symbol> { </symbol>
          <statements>
            <letStatement>
              <keyword> let </keyword>
              <identifier usage="used" kind="field" index="14"> wall </identifier>
              <symbol> = </symbol>
              <expression>
                <term>
                  <integerConstant> 3 </integerConstant>
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
            <letStatement>
              <keyword> let </keyword>
              <identifier usage="used" kind="field" index="1"> y </identifier>
              <symbol> = </symbol>
              <expression>
                <term>
                  <identifier usage="used" kind="field" index="12"> topWall </identifier>
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
          </statements>
          <symbol> } </symbol>
        </ifStatement>
        <ifStatement>
          <keyword> if </keyword>
          <symbol> ( </symbol>
          <expression>
            <term>
              <symbol> ~ </symbol>
              <term>
                <symbol> ( </symbol>
                <expression>
                  <term>
                    <identifier usage="used" kind="field" index="1"> y </identifier>
                  </term>
                  <symbol> &lt; </symbol>
                  <term>
                    <identifier usage="used" kind="field" index="13"> bottomWall </identifier>
                  </term>
                </expression>
                <symbol> ) </symbol>
              </term>
            </term>
          </expression>
          <symbol> ) </symbol>
          <symbol> { </symbol>
          <statements>
            <letStatement>
              <keyword> let </keyword>
              <identifier usage="used" kind="field" index="14"> wall </identifier>
              <symbol> = </symbol>
              <expression>
                <term>
                  <integerConstant> 4 </integerConstant>
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
            <letStatement>
              <keyword> let </keyword>
              <identifier usage="used" kind="field" index="1"> y </identifier>
              <symbol> = </symbol>
              <expression>
                <term>
                  <identifier usage="used" kind="field" index="13"> bottomWall </identifier>
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
          </statements>
          <symbol> } </symbol>
        </ifStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier usage="used" kind="subroutine"> show </identifier>
          <symbol> ( </symbol>
          <expressionList>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <returnStatement>
          <keyword> return </keyword>
          <expression>
            <term>
              <identifier usage="used" kind="field" index="14"> wall </identifier>
            </term>
          </expression>
          <symbol> ; </symbol>
        </returnStatement>
      </statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  <subroutineDec>
    <keyword> method </keyword>
    <keyword> void </keyword>
    <identifier usage="declared" kind="subroutine"> bounce </identifier>
    <symbol> ( </symbol>
    <parameterList>
      <keyword> int </keyword>
      <identifier usage="declared" kind="ARG" index="2"> bouncingDirection </identifier>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <varDec>
        <keyword> var </keyword>
        <keyword> int </keyword>
        <identifier usage="declared" kind="ARG" index="1"> newx </identifier>
        <symbol> , </symbol>
        <identifier usage="declared" kind="ARG" index="2"> newy </identifier>
        <symbol> , </symbol>
        <identifier usage="declared" kind="ARG" index="3"> divLengthx </identifier>
        <symbol> , </symbol>
        <identifier usage="declared" kind="ARG" index="4"> divLengthy </identifier>
        <symbol> , </symbol>
        <identifier usage="declared" kind="ARG" index="5"> factor </identifier>
        <symbol> ; </symbol>
      </varDec>
      <statements>
        <letStatement>
          <keyword> let </keyword>
          <identifier usage="used" kind="var" index="2"> divLengthx </identifier>
          <symbol> = </symbol>
          <expression>
            <term>
              <identifier usage="used" kind="field" index="2"> lengthx </identifier>
            </term>
            <symbol> / </symbol>
            <term>
              <integerConstant> 10 </integerConstant>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <letStatement>
          <keyword> let </keyword>
          <identifier usage="used" kind="var" index="3"> divLengthy </identifier>
          <symbol> = </symbol>
          <expression>
            <term>
              <identifier usage="used" kind="field" index="3"> lengthy </identifier>
            </term>
            <symbol> / </symbol>
            <term>
              <integerConstant> 10 </integerConstant>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <ifStatement>
          <keyword> if </keyword>
          <symbol> ( </symbol>
          <expression>
            <term>
              <identifier usage="used" kind="arg" index="1"> bouncingDirection </identifier>
            </term>
            <symbol> = </symbol>
            <term>
              <integerConstant> 0 </integerConstant>
            </term>
          </expression>
          <symbol> ) </symbol>
          <symbol> { </symbol>
          <statements>
            <letStatement>
              <keyword> let </keyword>
              <identifier usage="used" kind="var" index="4"> factor </identifier>
              <symbol> = </symbol>
              <expression>
                <term>
                  <integerConstant> 10 </integerConstant>
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
          </statements>
          <symbol> } </symbol>
          <keyword> else </keyword>
          <symbol> { </symbol>
          <statements>
            <ifStatement>
              <keyword> if </keyword>
              <symbol> ( </symbol>
              <expression>
                <term>
                  <symbol> ( </symbol>
                  <expression>
                    <term>
                      <symbol> ( </symbol>
                      <expression>
                        <term>
                          <symbol> ~ </symbol>
                          <term>
                            <symbol> ( </symbol>
                            <expression>
                              <term>
                                <identifier usage="used" kind="field" index="2"> lengthx </identifier>
                              </term>
                              <symbol> &lt; </symbol>
                              <term>
                                <integerConstant> 0 </integerConstant>
                              </term>
                            </expression>
                            <symbol> ) </symbol>
                          </term>
                        </term>
                      </expression>
                      <symbol> ) </symbol>
                    </term>
                    <symbol> &amp; </symbol>
                    <term>
                      <symbol> ( </symbol>
                      <expression>
                        <term>
                          <identifier usage="used" kind="arg" index="1"> bouncingDirection </identifier>
                        </term>
                        <symbol> = </symbol>
                        <term>
                          <integerConstant> 1 </integerConstant>
                        </term>
                      </expression>
                      <symbol> ) </symbol>
                    </term>
                  </expression>
                  <symbol> ) </symbol>
                </term>
                <symbol> | </symbol>
                <term>
                  <symbol> ( </symbol>
                  <expression>
                    <term>
                      <symbol> ( </symbol>
                      <expression>
                        <term>
                          <identifier usage="used" kind="field" index="2"> lengthx </identifier>
                        </term>
                        <symbol> &lt; </symbol>
                        <term>
                          <integerConstant> 0 </integerConstant>
                        </term>
                      </expression>
                      <symbol> ) </symbol>
                    </term>
                    <symbol> &amp; </symbol>
                    <term>
                      <symbol> ( </symbol>
                      <expression>
                        <term>
                          <identifier usage="used" kind="arg" index="1"> bouncingDirection </identifier>
                        </term>
                        <symbol> = </symbol>
                        <term>
                          <symbol> ( </symbol>
                          <expression>
                            <term>
                              <symbol> - </symbol>
                              <term>
                                <integerConstant> 1 </integerConstant>
                              </term>
                            </term>
                          </expression>
                          <symbol> ) </symbol>
                        </term>
                      </expression>
                      <symbol> ) </symbol>
                    </term>
                  </expression>
                  <symbol> ) </symbol>
                </term>
              </expression>
              <symbol> ) </symbol>
              <symbol> { </symbol>
              <statements>
                <letStatement>
                  <keyword> let </keyword>
                  <identifier usage="used" kind="var" index="4"> factor </identifier>
                  <symbol> = </symbol>
                  <expression>
                    <term>
                      <integerConstant> 20 </integerConstant>
                    </term>
                  </expression>
                  <symbol> ; </symbol>
                </letStatement>
              </statements>
              <symbol> } </symbol>
              <keyword> else </keyword>
              <symbol> { </symbol>
              <statements>
                <letStatement>
                  <keyword> let </keyword>
                  <identifier usage="used" kind="var" index="4"> factor </identifier>
                  <symbol> = </symbol>
                  <expression>
                    <term>
                      <integerConstant> 5 </integerConstant>
                    </term>
                  </expression>
                  <symbol> ; </symbol>
                </letStatement>
              </statements>
              <symbol> } </symbol>
            </ifStatement>
          </statements>
          <symbol> } </symbol>
        </ifStatement>
        <ifStatement>
          <keyword> if </keyword>
          <symbol> ( </symbol>
          <expression>
            <term>
              <identifier usage="used" kind="field" index="14"> wall </identifier>
            </term>
            <symbol> = </symbol>
            <term>
              <integerConstant> 1 </integerConstant>
            </term>
          </expression>
          <symbol> ) </symbol>
          <symbol> { </symbol>
          <statements>
            <letStatement>
              <keyword> let </keyword>
              <identifier usage="used" kind="var" index="0"> newx </identifier>
              <symbol> = </symbol>
              <expression>
                <term>
                  <integerConstant> 506 </integerConstant>
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
            <letStatement>
              <keyword> let </keyword>
              <identifier usage="used" kind="var" index="1"> newy </identifier>
              <symbol> = </symbol>
              <expression>
                <term>
                  <symbol> ( </symbol>
                  <expression>
                    <term>
                      <identifier usage="used" kind="var" index="3"> divLengthy </identifier>
                    </term>
                    <symbol> * </symbol>
                    <term>
                      <symbol> ( </symbol>
                      <expression>
                        <term>
                          <symbol> - </symbol>
                          <term>
                            <integerConstant> 50 </integerConstant>
                          </term>
                        </term>
                      </expression>
                      <symbol> ) </symbol>
                    </term>
                  </expression>
                  <symbol> ) </symbol>
                </term>
                <symbol> / </symbol>
                <term>
                  <identifier usage="used" kind="var" index="2"> divLengthx </identifier>
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
            <letStatement>
              <keyword> let </keyword>
              <identifier usage="used" kind="var" index="1"> newy </identifier>
              <symbol> = </symbol>
              <expression>
                <term>
                  <identifier usage="used" kind="field" index="1"> y </identifier>
                </term>
                <symbol> + </symbol>
                <term>
                  <symbol> ( </symbol>
                  <expression>
                    <term>
                      <identifier usage="used" kind="var" index="1"> newy </identifier>
                    </term>
                    <symbol> * </symbol>
                    <term>
                      <identifier usage="used" kind="var" index="4"> factor </identifier>
                    </term>
                  </expression>
                  <symbol> ) </symbol>
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
          </statements>
          <symbol> } </symbol>
          <keyword> else </keyword>
          <symbol> { </symbol>
          <statements>
            <ifStatement>
              <keyword> if </keyword>
              <symbol> ( </symbol>
              <expression>
                <term>
                  <identifier usage="used" kind="field" index="14"> wall </identifier>
                </term>
                <symbol> = </symbol>
                <term>
                  <integerConstant> 2 </integerConstant>
                </term>
              </expression>
              <symbol> ) </symbol>
              <symbol> { </symbol>
              <statements>
                <letStatement>
                  <keyword> let </keyword>
                  <identifier usage="used" kind="var" index="0"> newx </identifier>
                  <symbol> = </symbol>
                  <expression>
                    <term>
                      <integerConstant> 0 </integerConstant>
                    </term>
                  </expression>
                  <symbol> ; </symbol>
                </letStatement>
                <letStatement>
                  <keyword> let </keyword>
                  <identifier usage="used" kind="var" index="1"> newy </identifier>
                  <symbol> = </symbol>
                  <expression>
                    <term>
                      <symbol> ( </symbol>
                      <expression>
                        <term>
                          <identifier usage="used" kind="var" index="3"> divLengthy </identifier>
                        </term>
                        <symbol> * </symbol>
                        <term>
                          <integerConstant> 50 </integerConstant>
                        </term>
                      </expression>
                      <symbol> ) </symbol>
                    </term>
                    <symbol> / </symbol>
                    <term>
                      <identifier usage="used" kind="var" index="2"> divLengthx </identifier>
                    </term>
                  </expression>
                  <symbol> ; </symbol>
                </letStatement>
                <letStatement>
                  <keyword> let </keyword>
                  <identifier usage="used" kind="var" index="1"> newy </identifier>
                  <symbol> = </symbol>
                  <expression>
                    <term>
                      <identifier usage="used" kind="field" index="1"> y </identifier>
                    </term>
                    <symbol> + </symbol>
                    <term>
                      <symbol> ( </symbol>
                      <expression>
                        <term>
                          <identifier usage="used" kind="var" index="1"> newy </identifier>
                        </term>
                        <symbol> * </symbol>
                        <term>
                          <identifier usage="used" kind="var" index="4"> factor </identifier>
                        </term>
                      </expression>
                      <symbol> ) </symbol>
                    </term>
                  </expression>
                  <symbol> ; </symbol>
                </letStatement>
              </statements>
              <symbol> } </symbol>
              <keyword> else </keyword>
              <symbol> { </symbol>
              <statements>
                <ifStatement>
                  <keyword> if </keyword>
                  <symbol> ( </symbol>
                  <expression>
                    <term>
                      <identifier usage="used" kind="field" index="14"> wall </identifier>
                    </term>
                    <symbol> = </symbol>
                    <term>
                      <integerConstant> 3 </integerConstant>
                    </term>
                  </expression>
                  <symbol> ) </symbol>
                  <symbol> { </symbol>
                  <statements>
                    <letStatement>
                      <keyword> let </keyword>
                      <identifier usage="used" kind="var" index="1"> newy </identifier>
                      <symbol> = </symbol>
                      <expression>
                        <term>
                          <integerConstant> 250 </integerConstant>
                        </term>
                      </expression>
                      <symbol> ; </symbol>
                    </letStatement>
                    <letStatement>
                      <keyword> let </keyword>
                      <identifier usage="used" kind="var" index="0"> newx </identifier>
                      <symbol> = </symbol>
                      <expression>
                        <term>
                          <symbol> ( </symbol>
                          <expression>
                            <term>
                              <identifier usage="used" kind="var" index="2"> divLengthx </identifier>
                            </term>
                            <symbol> * </symbol>
                            <term>
                              <symbol> ( </symbol>
                              <expression>
                                <term>
                                  <symbol> - </symbol>
                                  <term>
                                    <integerConstant> 25 </integerConstant>
                                  </term>
                                </term>
                              </expression>
                              <symbol> ) </symbol>
                            </term>
                          </expression>
                          <symbol> ) </symbol>
                        </term>
                        <symbol> / </symbol>
                        <term>
                          <identifier usage="used" kind="var" index="3"> divLengthy </identifier>
                        </term>
                      </expression>
                      <symbol> ; </symbol>
                    </letStatement>
                    <letStatement>
                      <keyword> let </keyword>
                      <identifier usage="used" kind="var" index="0"> newx </identifier>
                      <symbol> = </symbol>
                      <expression>
                        <term>
                          <identifier usage="used" kind="field" index="0"> x </identifier>
                        </term>
                        <symbol> + </symbol>
                        <term>
                          <symbol> ( </symbol>
                          <expression>
                            <term>
                              <identifier usage="used" kind="var" index="0"> newx </identifier>
                            </term>
                            <symbol> * </symbol>
                            <term>
                              <identifier usage="used" kind="var" index="4"> factor </identifier>
                            </term>
                          </expression>
                          <symbol> ) </symbol>
                        </term>
                      </expression>
                      <symbol> ; </symbol>
                    </letStatement>
                  </statements>
                  <symbol> } </symbol>
                  <keyword> else </keyword>
                  <symbol> { </symbol>
                  <statements>
                    <letStatement>
                      <keyword> let </keyword>
                      <identifier usage="used" kind="var" index="1"> newy </identifier>
                      <symbol> = </symbol>
                      <expression>
                        <term>
                          <integerConstant> 0 </integerConstant>
                        </term>
                      </expression>
                      <symbol> ; </symbol>
                    </letStatement>
                    <letStatement>
                      <keyword> let </keyword>
                      <identifier usage="used" kind="var" index="0"> newx </identifier>
                      <symbol> = </symbol>
                      <expression>
                        <term>
                          <symbol> ( </symbol>
                          <expression>
                            <term>
                              <identifier usage="used" kind="var" index="2"> divLengthx </identifier>
                            </term>
                            <symbol> * </symbol>
                            <term>
                              <integerConstant> 25 </integerConstant>
                            </term>
                          </expression>
                          <symbol> ) </symbol>
                        </term>
                        <symbol> / </symbol>
                        <term>
                          <identifier usage="used" kind="var" index="3"> divLengthy </identifier>
                        </term>
                      </expression>
                      <symbol> ; </symbol>
                    </letStatement>
                    <letStatement>
                      <keyword> let </keyword>
                      <identifier usage="used" kind="var" index="0"> newx </identifier>
                      <symbol> = </symbol>
                      <expression>
                        <term>
                          <identifier usage="used" kind="field" index="0"> x </identifier>
                        </term>
                        <symbol> + </symbol>
                        <term>
                          <symbol> ( </symbol>
                          <expression>
                            <term>
                              <identifier usage="used" kind="var" index="0"> newx </identifier>
                            </term>
                            <symbol> * </symbol>
                            <term>
                              <identifier usage="used" kind="var" index="4"> factor </identifier>
                            </term>
                          </expression>
                          <symbol> ) </symbol>
                        </term>
                      </expression>
                      <symbol> ; </symbol>
                    </letStatement>
                  </statements>
                  <symbol> } </symbol>
                </ifStatement>
              </statements>
              <symbol> } </symbol>
            </ifStatement>
          </statements>
          <symbol> } </symbol>
        </ifStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier usage="used" kind="subroutine"> setDestination </identifier>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
                <identifier usage="used" kind="var" index="0"> newx </identifier>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <identifier usage="used" kind="var" index="1"> newy </identifier>
              </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <returnStatement>
          <keyword> return </keyword>
          <symbol> ; </symbol>
        </returnStatement>
      </statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  <symbol> } </symbol>
</class>
